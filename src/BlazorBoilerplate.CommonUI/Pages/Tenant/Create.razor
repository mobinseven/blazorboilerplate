@inject IMatToaster matToaster
@inject NavigationManager navigationManager
@inject HttpClient Http
@inject IAuthorizeApi AuthorizeApi
<h3>Create new tenant</h3>
<EditForm Model="@tenantDto" OnValidSubmit="CreateTenantAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset>
        <div class="form-group">
            <input @bind="@tenantDto.Title" placeholder="Title" />
        </div>
    </fieldset>
    <button type="submit">Create Tenant</button>
</EditForm>
@code {
    TenantDto tenantDto = new TenantDto();
    public async Task CreateTenantAsync()
    {
        ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/Tenants", tenantDto);
        if (apiResponse.StatusCode == 200)
        {
            //navigationManager.NavigateTo("/tenant");
            await AuthorizeApi.Logout();//force logout because claims must be refreshed.
            navigationManager.NavigateTo("/account/login");
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Tenant Creation Failed");
        }
    }
}